package com.android.triviaapp.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_DETAILS".
*/
public class GameDetailsDao extends AbstractDao<GameDetails, Long> {

    public static final String TABLENAME = "GAME_DETAILS";

    /**
     * Properties of entity GameDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GameId = new Property(0, Long.class, "gameId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Question1 = new Property(2, String.class, "question1", false, "QUESTION1");
        public final static Property Answer1 = new Property(3, String.class, "answer1", false, "ANSWER1");
        public final static Property Question2 = new Property(4, String.class, "question2", false, "QUESTION2");
        public final static Property Answer2 = new Property(5, String.class, "answer2", false, "ANSWER2");
        public final static Property AttendDate = new Property(6, String.class, "attendDate", false, "ATTEND_DATE");
    }


    public GameDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public GameDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_DETAILS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: gameId
                "\"NAME\" TEXT," + // 1: name
                "\"QUESTION1\" TEXT," + // 2: question1
                "\"ANSWER1\" TEXT," + // 3: answer1
                "\"QUESTION2\" TEXT," + // 4: question2
                "\"ANSWER2\" TEXT," + // 5: answer2
                "\"ATTEND_DATE\" TEXT);"); // 6: attendDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_DETAILS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GameDetails entity) {
        stmt.clearBindings();
 
        Long gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindLong(1, gameId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String question1 = entity.getQuestion1();
        if (question1 != null) {
            stmt.bindString(3, question1);
        }
 
        String answer1 = entity.getAnswer1();
        if (answer1 != null) {
            stmt.bindString(4, answer1);
        }
 
        String question2 = entity.getQuestion2();
        if (question2 != null) {
            stmt.bindString(5, question2);
        }
 
        String answer2 = entity.getAnswer2();
        if (answer2 != null) {
            stmt.bindString(6, answer2);
        }
 
        String attendDate = entity.getAttendDate();
        if (attendDate != null) {
            stmt.bindString(7, attendDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GameDetails entity) {
        stmt.clearBindings();
 
        Long gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindLong(1, gameId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String question1 = entity.getQuestion1();
        if (question1 != null) {
            stmt.bindString(3, question1);
        }
 
        String answer1 = entity.getAnswer1();
        if (answer1 != null) {
            stmt.bindString(4, answer1);
        }
 
        String question2 = entity.getQuestion2();
        if (question2 != null) {
            stmt.bindString(5, question2);
        }
 
        String answer2 = entity.getAnswer2();
        if (answer2 != null) {
            stmt.bindString(6, answer2);
        }
 
        String attendDate = entity.getAttendDate();
        if (attendDate != null) {
            stmt.bindString(7, attendDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GameDetails readEntity(Cursor cursor, int offset) {
        GameDetails entity = new GameDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // gameId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // question1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // answer1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // question2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // answer2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // attendDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GameDetails entity, int offset) {
        entity.setGameId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQuestion1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAnswer1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQuestion2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAnswer2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAttendDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GameDetails entity, long rowId) {
        entity.setGameId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GameDetails entity) {
        if(entity != null) {
            return entity.getGameId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GameDetails entity) {
        return entity.getGameId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
